// The distinction between "layout" and "formatting" is as follows: If the resulting CCS affects the placement of and/or visibility of multiple items, it is done here. If the CSS affects only the appearance of an item, then it appears in "formatting". Of course the appearance may affect the layout, so there is no hard distinction.


@mixin narrow-layout {
	@media screen and (min-width: 0px) and (max-width: $narrow-max-width) {
		@content
	}
}

@mixin medium-layout {
	@media screen and (min-width: $medium-min-width) and (max-width: $medium-max-width) {
		@content
	}
}

@mixin wide-layout {
	@media screen and (min-width: $wide-min-width) {
		@content
	}
}

@mixin medium-and-wide-layout {
	@media screen and (min-width: $medium-min-width) {
		@content
	}
}


// Layout top-to-bottom for the top level
// This arranges the navbanner-panel, column-panel, footer-separator and footer-panel (from "default.html")
.body-panel {
	display: flex;
	flex-direction: column;
	justify-content: flex-start;
}


// The navigation & banner (these two have to be together to enable a RWD design with an input/label in the banner area.)
//
.navbanner-panel {
		
	// Use the flex layout rules.
	display: flex;
	flex-direction: row;
	flex-wrap: wrap;
	justify-content: flex-start;

	// The size of the title depends on the width of the window.
	.navbanner-title {
	
		// The title area should take up all space not used by the menu label.
		flex-grow: 1;

		// Center the title if visible
		@if ($navbanner-include-banner == true) { display: flex; } @else { display: none }
		justify-content: center;
		align-items: center;
	}

	// The menu label is only visible in narrow layout.
	.navbanner-label {
		
		// Never grow the menu label (symbol)
		flex-grow: 0;

		// The menu label (symbol) should be centered if visible
		@if ($navbanner-include-banner == true) { display: flex; } @else { display: none }
		justify-content: center;
		align-items: center;

		// The label is used as checkbox-label, it should show a pointer when the mouse is above it.
		label {
			p:after { content: $menu-symbol-code; } // Set the menu symbol
			cursor: pointer;
		}
	}

	// The dividers should run accross the entire window. Note that they are not always visible, that depends on the active layout.
	.nav-top-divider { width: 100%; }
	.nav-bottom-divider { width: 100%; }
		
	@include narrow-layout {

		// Override visibility of the label 
		@if ($navbanner-include-banner == false) { .navbanner-label, .navbanner-title { display: flex; } }

		// Disabled items.
		.nav-bottom-divider, input { display: none; }
		
		// Display the menu only when the menu-checkbox (invisible) is checked.
		input:checked ~ { .menubar { display: flex; } }

		.menubar {

			// Is only visible when the menu symbol is selected
			display: none;

			// This forces the menu items below the banner.
			width: 100%;
			
			// Display the menu items vertically.
			flex-direction: column;
			
			// Appearances
			background-color: $menubar-background-color;
			
			// Make sure the separator is empty
			.separator:after { content: ''; }
			.separator {
				//display: block;
				width: 100%;
				height: $menubar-item-separator-line-width-narrow;
				background-color: $menubar-item-separator-line-color-narrow;
			}
			
			.item {
			
				// Layout
				display: flex;
				flex-direction: column;
				
				// Appearance
				background-color: $menubar-item-background-color-narrow;

				// Make the link areas as big as possible
				a {	width: 100%; height: 100%; }
				
				// Remove link underlining
				a { text-decoration: none; }

				// Use the item color for all elements
				p { color: $menubar-item-color }

				// If the checkbox is checked
				input:checked ~ {

					// Show submenu
					.dropdown { display: flex; }

					// When the submenu is open, show the appropriate symbol
					.title .symbol .code:after { content: $menubar-item-title-symbol-code-open-narrow; }
				}

				.title {
				
					// Layout
					display: flex;
					height: $menubar-item-height-narrow;
					.symbol { width: $menubar-item-disclosure-symbol-width-narrow; }
					.text { width: 100%; } // Takes up remainder of .title width
					
					.symbol {

						// Layout: Center the disclosure symbol
						display: flex;
						justify-content: center;
						align-items: center;
						
						// Load the disclosure symbol for the closed state
						.code:after { content: $menubar-item-title-symbol-code-closed-narrow; }
				
						// Show a clickable symbol over the disclosure symbol
						.code { cursor: pointer; }
					}
					
					.text {

						// Layout: Center vertically and justify-left
						display: flex;
						justify-content: start;
						align-items: center;
					}
				}
								
				.dropdown {
				
					// Disable submenu by default
					display: none;
					
					// Subitems are stacked vertically
					flex-direction: column;
					
					.separator {
						display: block;
						width: 100%;
						height: $menubar-subitem-separator-line-width-narrow;
						background-color: $menubar-subitem-separator-line-color-narrow;
					}
					
					.subitem .title {
						
						// Layout (row oriented)
						display: flex;
						
						// Appearance
						background-color: $menubar-subitem-background-color-narrow;
						
						.symbol { width: $menubar-item-disclosure-symbol-width-narrow; }
						
						.text a {
							display: flex;
							justify-content: start;
							align-items: center;
						}
						
						p { padding-left: $menubar-subitem-indent; }
					}
					
					//a, paddingAsLink { padding: $menubar-subitem-padding-narrow; }
				}
			}
		}
	}

	@include medium-and-wide-layout {

		// Do not show the checkbox label, the input(s) and the menu symbols
		.navbanner-label, input, .symbol { display: none; }
		
		.menubar {
		
			// Layout
			display: flex;
			width: 100%; // Ensures that the full width is used despite using flex.
			flex-direction: row;
			flex-wrap: nowrap;
			justify-content: $menubar-justify-content;
			
			// Appearances
			background-color: $menubar-background-color;
			border: $menubar-border;
			box-shadow: $menubar-box-shadow;
			@include medium-layout {
				padding: $menubar-padding-medium;
			}
			@include wide-layout {
				padding: $menubar-padding-wide;
			}
			
			.separator {
	
				// Color it
				color: $menubar-separator-color;
				background-color: $menubar-separator-background-color;

				@include medium-layout {
				
					// Set padding
					padding: $menubar-separator-padding-medium;
	
					// Set the separator symbol
					p:after { content: $menubar-separator-symbol-medium; }

					// The font for the separator
					p { font: $menubar-separator-font-medium; }
				}
				
				@include wide-layout {
				
					// Set padding
					padding: $menubar-separator-padding-wide;
	
					// Set the separator symbol
					p:after { content: $menubar-separator-symbol-wide; }

					// The font for the separator
					p { font: $menubar-separator-font-wide; }
				}
			}
			
			// Make all p's as small as possible
			p { margin: 0; padding: 0; }
			
			.item {
			
				// Vertical layout
				display: flex;
				flex-direction: column;
			
				// Hover effect
				p { color: $menubar-item-color; }
				background-color: $menubar-item-background-color;
				&:hover {
					p { color: $menubar-item-hover-color; }
					background-color: $menubar-item-background-hover-color;
				}
				
				// Make the entire hightlight block clickable
				a {	display: block; }
				
				// Remove the link underlining
				a { text-decoration: none; }

				@include medium-layout {
				
					// Sizing of the items
					a, .paddingAsLink { padding: $menubar-item-padding-medium;}
					
					// Font for the item text
					p { font: $menubar-item-font-medium; }
				}
				@include wide-layout {

					// Sizing of the items
					a, .paddingAsLink { padding: $menubar-item-padding-wide;}

					// Font for the item text
					p { font: $menubar-item-font-wide; }
				}

				// Display the submenu if the user hovers the mouse over it
				&:hover .dropdown { display: block; }

				// Display the submenu if the user taps the corresponding menu item
				input:checked ~ .dropdown { display: block; }					

				.dropdown {
						
					// Visibility depends on hovering over the item
					display: none;

					// Don't show the separators
					.separator { display: none; }
					
					// Keep the size of the item unaffected by the subitems
					position: absolute;
						
					// Appearances
					border: $menubar-dropdown-border;
					box-shadow: $menubar-dropdown-box-shadow;

					.subitem {
							
						// Hover effect
						p { color: $menubar-subitem-color; }
						background-color: $menubar-subitem-background-color;
						&:hover {
							p { color: $menubar-subitem-hover-color; }
							background-color: $menubar-subitem-background-hover-color;
						}
						
						@include medium-layout {
						
							// Sizing of the subitems
							a, .paddingAsLink { padding: $menubar-subitem-padding-medium; }
							
							// Font for subitem text
							p { font: $menubar-subitem-font-medium; }
						}
						@include wide-layout {
						
							// Sizing of the subitems
							a, .paddingAsLink { padding: $menubar-subitem-padding-wide; }
							
							// Font for subitem text
							p { font: $menubar-subitem-font-wide; }
						}
					}

					// Show selection for pages that match a menu entry
					.isActiveSelection { background-color: $menubar-subitem-active-selection-background-color; }
				}
			}
			
			// Show selection for pages that match a menu entry
			.isActiveSelection { background-color: $menubar-item-active-selection-background-color; }
		}
	}
}


// This bit of CSS is needed to fix the banner and menubar in place at the top of the screen.
//
.navbanner-panel-fixed-menubar {

	// Fix the menu and banner bar to the top of the screen
	position: fixed;
	top: 0;
	width: 100%;
}


// The layout for the column panel uses flex, but lays out the columns either column or row based depending on the size of the window (screen).
//
.column-panel {

	// Use flex, layout as a row or column, based on the screenwidth
	display: flex;
		
	@include narrow-layout {
	
		// This layout is column based, i.e. the content is displayed over one another.
		flex-direction: column;
				
		// The primary column must be displayed on top, use the 'order' property to enforce this.
		.primary-column { order: 1; }

		// The secondary column is put below the primary the second place
		.secondary-column { order: 2; }

		// Unused		
		.tertiary-column, .secondary-divider, .tertiary-divider { display: none; }
		.secondary-column .vmenu { display: none }
	}
	
	@include medium-layout {
		
		// This layout is row based
		flex-direction: row;
		
		// The secondary column uses a fixed witdh and hosts both the secondary and tertiary column content
		.secondary-column { width: $secondary-column-width; }

		// The primary column can grow
		.primary-column { flex: 1 1 auto; width: 1px; } // A width must be specified

		// Unused
		.tertiary-divider, .secondary-widget-divider, .tertiary-column { display: none; }
		.primary-column .vmenu { display: none; }
	}
	
	@include wide-layout {
	
		// This layout is row based
		flex-direction: row;
		
		// The secondary and tertiary columns uses a fixed witdh 
		.secondary-column { width: $secondary-column-width; }
		.tertiary-column { width: $tertiary-column-width; }
							
		// The primary column can grow
		.primary-column { flex: 1 1 auto; width: 1px; } // A width must be specified

		// Unused
		.secondary-column .tertiary-column-content, .tertiary-widget-divider, .secondary-widget-divider { display: none }
		.primary-column .vmenu { display: none; }
	}
}


// Add top margins for when the navbanner is fixed at the top of the screen. This prevents the content of the column panels from being placed behind the navbanner.
//
.column-panel-fixed-menubar {
	
	@include narrow-layout {
		margin-top: $narrow-banner-height + $narrow-menu-height;
	}
	
	@include medium-layout {
		margin-top: $medium-banner-height + $medium-menu-height;
	}
	
	@include wide-layout {
		margin-top: $wide-banner-height + $wide-menu-height;
	}
}